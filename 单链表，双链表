 /**
     * 查找第一个等于value的值,实现方案一
     *
     * @param a
     * @param value
     * @return
     */
    public static int binarySearchFirstOne(int[] a, int value) {
        int n = a.length;
        int low = 0;
        int high = n - 1;
​
        while (low <= high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid] >= value)
                high = mid - 1;
            else
                low = mid + 1;
        }
        if (low < n && a[low] == value) {
            return low;
        } else {
            return -1;
        }
    }
​
    /**
     * 查找第一个等于value的值,实现方案二
     *
     * @param a
     * @param value
     * @return
     */
    public static int binarySearchFirstTwo(int[] a, int value) {
        int n = a.length;
        int low = 0;
        int high = n - 1;
​
        while (low <= high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid] > value)
                high = mid - 1;
            else if (a[mid] < value)
                low = mid + 1;
            else {
                //当a[mid]=value时,若mid=0,则mid肯定是第一个元素,或者a[mid-1]!=value,则mid前面的元素都是小于value的,
                // 因为数组是有序的,所以mid就是第一个等于value的值
                if (mid == 0 || a[mid - 1] != value)
                    return mid;
                else
                    high = mid - 1;
            }
        }
        return -1;
    }
