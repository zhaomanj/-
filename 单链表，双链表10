package main

import (
	"errors"
	"fmt"
)

type Node struct {
	id   int
	name string
	next *Node
}

type SingleLink struct {
	head *Node
}

func (singleLink *SingleLink) orderInsert(node *Node) {
	// 按Node.id从小到大的顺序，插入链表中
	curNode := singleLink.head
	if curNode.id == 0 {
		// 第一次插入元素的空链表
		singleLink.head = node
	} else {
		// 如果node.id比队首id小，则队首让位后移，要保证队首最小。因为取值比较的时候， 是取curNode.next节点与node进行比较，如果满足大小顺序，
		// 则将node插入curNode和curNode.next之间
		if curNode.id > node.id {
			node.next = curNode
			singleLink.head = node
		} else {
			// 如果node.id不比队首id小，则往后取一位，用后一位与node比较，匹配则插入当前位与后一位中间
			for {
				if curNode.next == nil {
					// 循环到最后一位都没有插入成功，说明node.id比现有链表中的所有node的id都大，则node成为新的队尾
					curNode.next = node
					break
				}
				if curNode.next.id > node.id {
					node.next = curNode.next
					curNode.next = node
					break
				}
				curNode = curNode.next
			}
		}
	}
}

func (singleLink *SingleLink) pop(id int) (node *Node, err error) {
	// 弹出链表中指定id的node
	curNode := singleLink.head
	if curNode.id == id {
		// 要取的是队首
		singleLink.head = singleLink.head.next
		return curNode, nil
	}
	flag := false // 是否查找到的标志
	for {
		if curNode.next == nil {
			break
		}
		if curNode.next.id == id {
			flag = true
			selectNode := curNode.next
			curNode.next = curNode.next.next
			return selectNode, nil
		}
		curNode = curNode.next
	}
	if !flag {
		// 如果循环结束还没有查找到，输出信息
		return nil, errors.New("node not found")
	}
	return
}

func (singleLink *SingleLink) getLength() (number int) {
	curNode := singleLink.head
	if singleLink.head.id == 0 || singleLink.head == nil {
		// 空链表
		return
	} else {
		for {
			number += 1
			curNode = curNode.next
			if curNode == nil {
				break
			}
		}
	}
	fmt.Println("current link length:", number)
	return number
}

func (singleLink *SingleLink) list() {
	if singleLink.head == nil || singleLink.head.id == 0 {
		fmt.Println("link is empty")
	} else {
		curNode := singleLink.head
		for {
			if curNode == nil {
				break
			}
			fmt.Print(*curNode, "==>")
			curNode = curNode.next
		}
	}
	fmt.Println()

}

func main() {
	// 约定空链表的header初始id为0，后面加入的实例id必须大于0
	var originalHead = Node{
		id: 0,
	}
	var s = SingleLink{
		head: &originalHead,
	}
	var node1 = Node{
		id:   1,
		name: "001",
	}
	var node2 = Node{
		id:   2,
		name: "002",
	}
	var node3 = Node{
		id:   3,
		name: "003",
	}
	var node4 = Node{
		id:   4,
		name: "004",
	}
	var node5 = Node{
		id:   5,
		name: "005",
	}

	s.orderInsert(&node4)
	s.list()
	s.orderInsert(&node2)
	s.list()
	s.orderInsert(&node3)
	s.list()
	s.orderInsert(&node5)
	s.list()
	s.orderInsert(&node1)
	s.list()
	s.getLength()
	popNode, err := s.pop(3)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("pop node successfully:", *popNode)
	s.list()

	/*
		output:
			{4 004 <nil>}==>
			{2 002 0xc00000a0e0}==>{4 004 <nil>}==>
			{2 002 0xc00000a0c0}==>{3 003 0xc00000a0e0}==>{4 004 <nil>}==>
			{2 002 0xc00000a0c0}==>{3 003 0xc00000a0e0}==>{4 004 0xc00000a100}==>{5 005 <nil>}==>
			{1 001 0xc00000a0a0}==>{2 002 0xc00000a0c0}==>{3 003 0xc00000a0e0}==>{4 004 0xc00000a100}==>{5 005 <nil>}==>
			current link length: 5
			pop node successfully: {3 003 0xc00000a0e0}
			{1 001 0xc00000a0a0}==>{2 002 0xc00000a0e0}==>{4 004 0xc00000a100}==>{5 005 <nil>}==>
	*/
}
