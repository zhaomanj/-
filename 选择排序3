#include"sort_struct.h"
using namespace std;
 
void QSort(SqList *L,int low,int high);
int Partition(SqList *L,int low,int high);
 
/* 对顺序表L作快速排序 */
void QuickSort(SqList *L)
{
	QSort(L,1,L->length);
}
 
/* 对顺序表L中的子序列L->r[low...high]作快速排序 */
void QSort(SqList *L,int low,int high)
{
	int pivot;
	if(low < high)
	{
		pivot = Partition(L,low,high);	//将L->r[low...high]一分为二，算出枢轴值pivot
		QSort(L,low,pivot-1);	//对低子表递归排序
		QSort(L,pivot+1,high);	//对高子表递归排序
	}
}
 
/* 交换顺序表L中子表的记录，使枢轴记录到位，并返回其所在位置 */
/* 此时在它之前（后）的记录均不大（小）于它。 */
int Partition(SqList *L,int low,int high)
{
	int pivotkey;
	pivotkey = L->r[low];	//用子表的第一个记录作枢轴记录
	while(low<high)	//从表的两端交替向中间扫描
	{
		while(low<high && L->r[high]>=pivotkey)
			high--;
		swap(L,low,high);	//将比枢轴记录小的记录交换到低端
		while(low<high && L->r[low]<=pivotkey)
			low++;
		swap(L,low,high);	//将比枢轴记录大的记录交换到高端
	}
	return low;		//返回枢轴所在位置
}
 
int main()
{
	SqList *L = new SqList;
	L->length = 10;
	RandomCreat(L,L->length);
	cout<<"快速排序前：";
	showSqList(L);
	cout<<"快速排序后：";
	QuickSort(L);
	showSqList(L);
	return 0;
}
