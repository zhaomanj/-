#include<iostream>
#include<cstdio>
#include<queue>
#include<cstring>
//#define max(x,y) x>y?x:y
//#define min(x,y) x<y?x:y
using namespace std;
/*const&int*/
const int maxnode=1008;
const int maxline=3001;
int totnode,totline;
int ans;
/*ljjz*/
int can[maxnode][maxnode];
/*dinic*/
queue<int> team;
int ceng[maxnode];
int superS,superE;
/*---cut---*/
inline void read(int &x){  
    char c=getchar();x=0;int flag=0;  
    while((c>'9'||c<'0')&&c!='-') c=getchar();  
    if(c=='-'){flag=1;c=getchar();}  
    while(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}  
    if(flag)x=-x;  
}  

inline void write(int x){  
    if(x<0){putchar('-');x=-x;}  
    if(x/10)write(x/10);  
    putchar((x%10)+'0');  
}  

inline void writeln(int x){  
    write(x);putchar('\n');  
}  

bool Dinic_BFS(int startnode)
{
    memset(ceng,-1,sizeof(ceng));
    while(!team.empty()) team.pop();

    team.push(startnode);
    ceng[startnode]=0;

    int i;
    int teamhead;
    while(!team.empty())
    {
        teamhead=team.front();
        team.pop();

        for(i=0;i<=totnode+2;++i)
        {
            if(can[teamhead][i]>0&&ceng[i]==-1)
            {
                team.push(i);
                ceng[i]=ceng[teamhead]+1;
            }
        }
    }
    if(ceng[superE]==-1) return 0;
    return 1;
}

int Dinic_ZG(int nownode,int wave)
{
    if(nownode==superE) return wave;


    int tmp;
    for(int i=0;i<=totnode+2;++i)
    {
        if(can[nownode][i]>0&&ceng[i]==ceng[nownode]+1)
        {
            if((tmp=Dinic_ZG(i,1)))
            {
                //printf("%d\n",tmp);
                can[nownode][i]-=tmp;
                can[i][nownode]+=tmp;
                return tmp;
            }
        }
    }
    return 0;
}

int main()
{
    //freopen("cp.out","w",stdout);
    read(totnode);read(totline);
    int x,y;
    superS=totnode+2;
    superE=totnode+1;

    for(int i=1;i<=totline;++i)
    {
        read(x);read(y);
        can[x][y]=1;
        can[superS][x]=1;
        can[y][superE]=1;
    }

    int tmp;
    while(Dinic_BFS(superS))
    {
        while((tmp=Dinic_ZG(superS,1)))
        {
            ans+=tmp;
        }
    }
    printf("%d\n",ans);
}
